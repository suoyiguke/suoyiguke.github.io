<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>javax-validation和hibernate-validator参数校验.md</title>
      <link href="/2022/03/20/javax-validation-he-hibernate-validator-can-shu-xiao-yan-md/"/>
      <url>/2022/03/20/javax-validation-he-hibernate-validator-can-shu-xiao-yan-md/</url>
      
        <content type="html"><![CDATA[<h1 id="javax-validation和hibernate-validator参数校验"><a href="#javax-validation和hibernate-validator参数校验" class="headerlink" title="javax.validation和hibernate-validator参数校验"></a>javax.validation和hibernate-validator参数校验</h1><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>这两个包要同时导入！</p><pre><code>   &lt;dependency&gt;        &lt;groupId&gt;javax.validation&lt;/groupId&gt;        &lt;artifactId&gt;validation-api&lt;/artifactId&gt;        &lt;version&gt;2.0.1.Final&lt;/version&gt;      &lt;/dependency&gt;      &lt;dependency&gt;        &lt;groupId&gt;org.hibernate.validator&lt;/groupId&gt;        &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;        &lt;version&gt;6.0.7.Final&lt;/version&gt;      &lt;/dependency&gt;</code></pre><p>Controller</p><pre><code>    @PostMapping(&quot;/tabletSign/pushInfo/patient&quot;)    public AjaxResult pushInfoPatient(@Valid @RequestBody BizPatient bizPatient) &#123;    &#125;</code></pre><p>JavaBean</p><pre><code>public class BizPatient &#123;    private static final long serialVersionUID = 1L;    @NotNull(message = &quot;id不能为空&quot;)    private Long patientId;&#125;</code></pre><h3 id="Validated和-Valid的区别"><a href="#Validated和-Valid的区别" class="headerlink" title="@Validated和@Valid的区别"></a>@Validated和@Valid的区别</h3><p><strong>在Controller中校验方法参数时，使用@Valid和@Validated并无特殊差异（若不需要分组校验的话）</strong><br>@Valid：标准JSR-303规范的标记型注解，用来标记验证属性和方法返回值，进行级联和递归校验<br>@Validated：Spring的注解，是标准JSR-303的一个变种（补充），提供了一个分组功能，可以在入参验证时，根据不同的分组采用不同的验证机制</p><p>方法级别：<br><strong>@Validated注解可以用于类级别</strong>，用于支持Spring进行方法级别的参数校验。**@Valid可以用在属性级别约束，用来表示级联校验。**<br>@Validated只能用在类、方法和参数上，而@Valid可用于方法、字段、构造器和参数上</p><h3 id="如何分组校验？"><a href="#如何分组校验？" class="headerlink" title="如何分组校验？"></a>如何分组校验？</h3><p>有时候我们需要在不同的Controller中校验不同的字段</p><p>Controller</p><pre><code>    @PostMapping(&quot;/tabletSign/pushInfo/patient&quot;)    public AjaxResult pushInfoPatient(        @Validated(BizPatient.SaveGroup.class) @RequestBody BizPatient bizPatient) &#123;    &#125;    @PostMapping(&quot;/tabletSign/patient/signerInfo&quot;)    public AjaxResult getSignerInfo(        @Validated(BizPatient.SelectGroup.class) @RequestBody BizPatient bizPatient) &#123;    &#125;</code></pre><p>JavaBean</p><pre><code>public class BizPatient &#123;    private static final long serialVersionUID = 1L;    /**     * $column.columnComment     */    //非空判断    @NotNull(groups = &#123;SaveGroup.class, SelectGroup.class&#125;, message = &quot;patientId 不能为空&quot;)    private Long patientId&#125;</code></pre><h3 id="如何校验关联对象？"><a href="#如何校验关联对象？" class="headerlink" title="如何校验关联对象？"></a>如何校验关联对象？</h3><pre><code>    @PostMapping(value = &quot;/saveOrUpdate&quot;)    public GbmResult saveOrUpdate(@RequestBody @Validated GdVo gdVo) &#123;    &#125;@Datapublic class GdVo &#123;    @Valid    private GdAfterSalesDto gdAfterSalesDto;    @Valid    private List&lt;GdProcessRecordDto&gt; gdProcessRecordDto;&#125;</code></pre><h3 id="校验List"><a href="#校验List" class="headerlink" title="校验List"></a>校验List</h3><p>Controller类上加@Validated</p><pre><code>@Validatedpublic class ZskKnowledgeController &#123;</code></pre><pre><code>@PostMapping(value = &quot;/saveOrUpdateZskAccessories&quot;)    public GbmResult saveOrUpdateZskAccessories(@RequestBody @Valid List&lt;ZskAccessoriesListType&gt; zskKnowledgeVoList) &#123;</code></pre><h3 id="手动校验工具类"><a href="#手动校验工具类" class="headerlink" title="手动校验工具类"></a>手动校验工具类</h3><p>有时候注解不生效，我们可以手动校验</p><pre><code>import org.springframework.validation.BindingResult;import javax.validation.ConstraintViolation;import javax.validation.Validation;import javax.validation.Validator;import java.util.Set;import java.util.stream.Collectors;public class ValidParameterUtils &#123;    private static Validator validator;    static &#123;        validator = Validation.buildDefaultValidatorFactory().getValidator();    &#125;    public static void validParameter(BindingResult validResult)&#123;        if (validResult.hasErrors())&#123;            throw new GBMException(validResult.getFieldError().getDefaultMessage(),GbmResultCode.PARAMETER_EXCEPTION.code());        &#125;    &#125;    public static void validateEntity(Object object, Class&lt;?&gt;... groups)            throws GBMException &#123;        Set&lt;ConstraintViolation&lt;Object&gt;&gt; constraintViolations = validator.validate(object, groups);        if (!constraintViolations.isEmpty()) &#123;            StringBuilder msg = new StringBuilder();            for(ConstraintViolation&lt;Object&gt; constraint:  constraintViolations)&#123;                msg.append(constraint.getMessage()).append(&quot;  &quot;);            &#125;            throw new GBMException(msg.toString(),GbmResultCode.FAIL.code());        &#125;    &#125;    /**     * @Des 返回错误信息     * @Author yinkai     * @Date 2022/2/28 9:24     */    public static String validateEntityRString(Object object, Class&lt;?&gt;... groups) &#123;        Set&lt;ConstraintViolation&lt;Object&gt;&gt; constraintViolations = validator.validate(object, groups);        return constraintViolations.stream().map(ConstraintViolation::getMessage).collect(Collectors.joining(&quot;  &quot;));    &#125;&#125;</code></pre><p>使用</p><pre><code>public class ZskQuestionsAndAnswersVo &#123;    @NotNull(groups = &#123;AddGroup.class&#125;, message = &quot;knowledgeId为空&quot;)    private Long knowledgeId;    @Length(max = 100, min = 1, message = &quot;问题必须在1-100字符之间&quot;)    @NotBlank(groups = &#123;AddGroup.class&#125;, message = &quot;problemContent为空&quot;)    private String problemContent;    @Length(max = 500, min = 1, message = &quot;回答必须在1-500字符之间&quot;)    @NotBlank(groups = &#123;AddGroup.class&#125;, message = &quot;answer为空&quot;)    private String answer;&#125;</code></pre><pre><code>    @PostMapping(value = &quot;/addQuestionsAndAnswers&quot;)    public GbmResult addQuestionsAndAnswers(@RequestParam(&quot;img&quot;) MultipartFile[] img,                                            @RequestParam(&quot;vedio&quot;) MultipartFile[] vedio,                                            @Valid ZskQuestionsAndAnswersVo zskQuestionsAndAnswersVo) &#123;        ValidParameterUtils.validateEntity(zskQuestionsAndAnswersVo,AddGroup.class);    &#125;</code></pre><p>还需定义全局异常处理器</p><pre><code>@RestControllerAdvice@Order(100)public class GBMExceptionHandler &#123;    private Logger logger = LoggerFactory.getLogger(getClass());    //处理Get请求中 使用@Valid 验证路径中请求实体校验失败后抛出的异常    @ExceptionHandler(org.springframework.validation.BindException.class)    @ResponseBody    public GbmResult BindExceptionHandler(BindingResult e) &#123;        String message = e.getAllErrors().stream().map(DefaultMessageSourceResolvable::getDefaultMessage).collect(Collectors.joining());        return GbmResult.error(GbmResultCode.PARAMETER_EXCEPTION.getCode(),message);    &#125;</code></pre><h3 id="注解含义"><a href="#注解含义" class="headerlink" title="注解含义"></a>注解含义</h3><p>@Pattern(regexp = “1[3|4|5|7|8][0-9]\d{8}”,message = “手机号码格式不正确”)<br>    @NotEmpty(message =”returnAndExchangeInformation 不能为空”)<br>@NotNull(message =”knowledgeId 不能为空”)<br>    @Digits(integer = 10, fraction = 2, message = “补发运费格式错误”)<br>    @Length(max = 50, min = 1, message = “配件名称必须在1-50字符之间”)<br>@AssertFalse    该值必须为False<br>@AssertTrue    该值必须为True<br>@DecimalMax(value，inclusive)    被注释的元素必须是一个数字，其值必须小于等于指定的最大值 ，inclusive表示是否包含该值<br>@DecimalMin(value，inclusive)    被注释的元素必须是一个数字，其值必须大于等于指定的最小值 ，inclusive表示是否包含该值<br>@Digits    限制必须为一个小数，且整数部分的位数不能超过integer，小数部分的位数不能超过fraction<br>@Email    该值必须为邮箱格式<br>@Future    被注释的元素必须是一个将来的日期<br>@FutureOrPresent    被注释的元素必须是一个现在或将来的日期<br>@Max(value)    被注释的元素必须是一个数字，其值必须小于等于指定的最大值<br>@Min(value)    被注释的元素必须是一个数字，其值必须大于等于指定的最小值<br>@Negative    该值必须小于0<br>@NegativeOrZero    该值必须小于等于0<br>@NotBlank    该值不为空字符串，例如“ ”<br>@NotEmpty    该值不为空字符串<br>@NotNull    该值不为Null<br>@Null    该值必须为Null<br>@Past    被注释的元素必须是一个过去的日期<br>@PastOrPresent    被注释的元素必须是一个过去或现在的日期<br>@Pattern(regexp)    匹配正则<br>@Positive    该值必须大于0<br>@PositiveOrZero    该值必须大于等于0<br>@Size(min,max)    数组大小必须在[min,max]这个区间</p><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><p>手动实现一个自定义注解，做到灵活指定字符串字段只包含数字、字母、特殊符号、中文的校验</p><pre><code>import javax.validation.Constraint;import javax.validation.Payload;import java.lang.annotation.*;@Target(&#123;ElementType.FIELD&#125;)@Retention(RetentionPolicy.RUNTIME)@Documented@Constraint(        validatedBy = &#123;ContainCharValidator.class&#125;)public @interface ContainChar &#123;    String message() default &quot;&quot;;    Class&lt;?&gt;[] groups() default &#123;&#125;;    //必须包含这个，否则报错    //javax.validation.ConstraintDefinitionException: HV000074: com.gbm.cloud.treasure.entity.zsk.ContainChar contains Constraint annotation, but does not contain a payload parameter.    Class&lt;? extends Payload&gt;[] payload() default &#123;&#125;;    ContainCharEnum[] value() default &#123;ContainCharEnum.CHINESE, ContainCharEnum.NUMBER, ContainCharEnum.LETTER, ContainCharEnum.SYMBOL&#125;;&#125;</code></pre><pre><code>/** * @Des * @Author yinkai * @Date 2022/3/1 14:38 */public class ContainCharValidator implements ConstraintValidator&lt;ContainChar, String&gt; &#123;    private String message;    private ContainCharEnum[] values;    private Class&lt;?&gt;[] groups;    @Override    public void initialize(ContainChar constraintAnnotation) &#123;        this.message = constraintAnnotation.message();        this.values = constraintAnnotation.value();        this.groups = constraintAnnotation.groups();    &#125;    /**     * @Des 遍历，全都不包含才返回false     * @Author yinkai     * @Date 2022/3/1 13:49     */    public boolean isValid2(String value, ConstraintValidatorContext context) &#123;        for (ContainCharEnum containCharEnum : values) &#123;            switch (containCharEnum) &#123;                case CHINESE:                    if (!CHINESE.getPattern().matcher(value).find()) &#123;                        //禁止默认消息返回                        context.disableDefaultConstraintViolation();                        //自定义返回消息                        context.buildConstraintViolationWithTemplate(message+&quot;不包含&quot;+containCharEnum).addConstraintViolation();                        return false;                    &#125;                    break;                case NUMBER:                    if (!NUMBER.getPattern().matcher(value).find()) &#123;                        //禁止默认消息返回                        context.disableDefaultConstraintViolation();                        //自定义返回消息                        context.buildConstraintViolationWithTemplate(message+&quot;不包含&quot;+containCharEnum).addConstraintViolation();                        return false;                    &#125;                    break;                case SYMBOL:                    if (!SYMBOL.getPattern().matcher(value).find()) &#123;                        //禁止默认消息返回                        context.disableDefaultConstraintViolation();                        //自定义返回消息                        context.buildConstraintViolationWithTemplate(message+&quot;不包含&quot;+containCharEnum).addConstraintViolation();                        return false;                    &#125;                    break;                case LETTER:                    if (!LETTER.getPattern().matcher(value).find()) &#123;                        //禁止默认消息返回                        context.disableDefaultConstraintViolation();                        //自定义返回消息                        context.buildConstraintViolationWithTemplate(message+&quot;不包含&quot;+containCharEnum).addConstraintViolation();                        return false;                    &#125;                    break;                default:                    break;            &#125;        &#125;        return true;    &#125;    //遍历，全都不包含才返回false || 包含之外的就返回false    // !(包含一个 &amp;&amp; 只包含内部)    @Override    public boolean isValid(String value, ConstraintValidatorContext context) &#123;        HashSet&lt;Boolean&gt; booleans = new HashSet&lt;&gt;(2);        StringBuilder stringBuilder = new StringBuilder();        for (ContainCharEnum containCharEnum : values) &#123;            booleans.add(containCharEnum.getPattern().matcher(value).find());            stringBuilder.append(containCharEnum);        &#125;        //不包含true--&gt;全都是false--&gt;全都不包含        if (!booleans.contains(Boolean.TRUE)) &#123;            //禁止默认消息返回            context.disableDefaultConstraintViolation();            //自定义返回消息            context.buildConstraintViolationWithTemplate(message + value + &quot;不包含 &quot; + stringBuilder).addConstraintViolation();            return false;        &#125;        Set&lt;ContainCharEnum&gt; noFindSet = Arrays.stream(values()).filter(m -&gt; !ArrayUtil.contains(values, m)).collect(Collectors.toSet());        for (ContainCharEnum containCharEnum : noFindSet) &#123;            if (containCharEnum.getPattern().matcher(value).find()) &#123;                //禁止默认消息返回                context.disableDefaultConstraintViolation();                //自定义返回消息                context.buildConstraintViolationWithTemplate(message + value + &quot;不能包含 &quot; + containCharEnum).addConstraintViolation();                return false;            &#125;        &#125;        return true;    &#125;&#125;</code></pre><pre><code>public enum ContainCharEnum &#123;    CHINESE(0, &quot;中文&quot;,Pattern.compile(&quot;[\u4E00-\u9FA5|\\！|\\，|\\。|\\（|\\）|\\《|\\》|\\“|\\”|\\？|\\：|\\；|\\【|\\】]&quot;)),    NUMBER(1, &quot;数字&quot;, Pattern.compile(&quot;[0-9]&quot;)),    LETTER(2, &quot;字母&quot;,Pattern.compile(&quot;.*[a-zA-Z]+.*&quot;)),    SYMBOL(3, &quot;特殊符号&quot;,Pattern.compile(&quot;.*[`~!@#$%^&amp;*()+=|&#123;&#125;&#39;:;&#39;,\\[\\]·.&lt;&gt;/?~！@#￥%……&amp;*（）——+|&#123;&#125;【】‘；：”“’。，、？\\\\]+.*&quot;));    @EnumValue//标记数据库存的值是code    private Integer code;    @JsonValue    private String desc;    private Pattern pattern;    ContainCharEnum(Integer code, String desc,Pattern pattern) &#123;        this.code = code;        this.desc = desc;        this.pattern = pattern;    &#125;    @Override    public String toString() &#123;        return desc;    &#125;    public int getValue() &#123;        return code;    &#125;    public Pattern getPattern() &#123;        return pattern;    &#125;&#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql 使用mysqld_multi在一台机器上安装多个mysql实例（多实例安装）</title>
      <link href="/2021/05/02/two/"/>
      <url>/2021/05/02/two/</url>
      
        <content type="html"><![CDATA[<p><a href="https://dev.mysql.com/doc/refman/5.7/en/mysqld-multi.html">https://dev.mysql.com/doc/refman/5.7/en/mysqld-multi.html</a></p><p>多实例安装即是一台服务器安装多个mysql实例；这样可以充分利用硬件资源；通过mysqld_multi程序即可。</p><p>例如我们现在有一台配置较高的机器：32C，512G，8SSD做RIAND5，而4C 8G才是主流服务器配置。这么一台服务器仅仅跑一个mysql是非常奢侈的。现在我们就可以在这台机器上同时部署三个mysql实例：mysqld3306、mysqld3307、mysqld3308。</p><h2 id="mysqld-multi配置"><a href="#mysqld-multi配置" class="headerlink" title="mysqld_multi配置"></a>mysqld_multi配置</h2><p>1、配置mysqld_multi节点；mysqld_safe启动、mysqladmin停止、mysqld_multi.log日志（有问题都可以到这里排查）。<br>2、配置三个实例：mysqld3306、mysqld3307、mysqld3308；分别指定port、datadir、socket。<br>3、此时的[mysqld]节点下的配置是mysqld3306、mysqld3307、mysqld3308三个实例所共享的。<br>4、[client] 节点配置了默认客户端连接参数。我这里配置了root用户、密码还有指定socket为/tmp/mysql.sock3306。则随后可以直接使用mysql命令连接到mysql3306实例而不需要额外指定参数。</p><pre><code>[mysqld]user = mysqlbasedir=/home/mysql5.7/mysql-5.7.33-linux-glibc2.12-x86_64log_error=error.logplugin-load=validate_password.so[mysqld_multi]mysqld=/home/mysql5.7/mysql-5.7.33-linux-glibc2.12-x86_64/bin/mysqld_safemysqladmin=/home/mysql5.7/mysql-5.7.33-linux-glibc2.12-x86_64/bin/mysqladminlog=/home/mysql5.7/mysql-5.7.33-linux-glibc2.12-x86_64/mysqld_multi.log[mysqld3306]port=3306datadir=/mdata/mysql57-3306socket= /tmp/mysql.sock3306[mysqld3307]port=3307datadir=/mdata/mysql57-3307socket= /tmp/mysql.sock3307[mysqld3308]port=3308datadir=/mdata/mysql57-3308socket= /tmp/mysql.sock3308[client]user=rootpassword=1111aaA_socket= /tmp/mysql.sock3306[mysql]prompt=(\\u@\\h) [\\d]&gt;\\</code></pre><h2 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h2><p>1、以mysqld3306实例为例，初始化数据如下。注意指定datadir。</p><pre><code>[root@localhost bin]# ./mysqld --initialize --datadir=/mdata/mysql57-3306</code></pre><blockquote><p>注意：[mysqld]下配置了plugin-load=validate_password.so 密码插件的话就不能使用–initialize-insecure，请使用–initialize。否则初始化后密码是空的，然后连不上。</p></blockquote><p>mysqld3306实例生成密码如下：</p><pre><code>[root@localhost mysql57-3306]# cat error.log 2021-05-01T03:22:15.245117Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).2021-05-01T03:22:16.562503Z 0 [Warning] InnoDB: New log files created, LSN=457902021-05-01T03:22:16.692390Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.2021-05-01T03:22:16.750221Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: 6e1b5ce4-aa2c-11eb-befe-000c292882e9.2021-05-01T03:22:16.751331Z 0 [Warning] Gtid table is not ready to be used. Table &#39;mysql.gtid_executed&#39; cannot be opened.2021-05-01T03:22:17.412496Z 0 [Warning] CA certificate ca.pem is self signed.2021-05-01T03:22:17.657496Z 1 [Note] A temporary password is generated for root@localhost: Ye-7i!4-gtw)</code></pre><p>2、使用mysqld_multi 命令启动实例，start后面跟的3306和[mysqld3306]中的3306对应起来，这里可以使用任何名字。如[mysqld1]就这样启动：./mysqld_multi start 1。</p><pre><code>[root@localhost bin]# ./mysqld_multi start 3306</code></pre><p>3、查看状态</p><pre><code>[root@localhost bin]# ./mysqld_multi report 3306Reporting MySQL serversMySQL server from group: mysqld3306 is running</code></pre><p>4、查看进程。如下启动mysqld3306 实例后就出现了两个进程：mysqld_safe 和 mysqld 。</p><pre><code>[root@localhost bin]# ps -ef |grep mysqlroot      11675      1  0 10:55 pts/0    00:00:00 /bin/sh /home/mysql5.7/mysql-5.7.33-linux-glibc2.12-x86_64/bin/mysqld_safe --port=3306 --datadir=/mdata/mysql57-3306 --socket=/tmp/mysql.sock3306mysql     11827  11675  2 10:55 pts/0    00:00:00 /home/mysql5.7/mysql-5.7.33-linux-glibc2.12-x86_64/bin/mysqld --basedir=/home/mysql5.7/mysql-5.7.33-linux-glibc2.12-x86_64 --datadir=/mdata/mysql57-3306 --plugin-dir=/home/mysql5.7/mysql-5.7.33-linux-glibc2.12-x86_64/lib/plugin --user=mysql --log-error=error.log --pid-file=localhost.localdomain.pid --socket=/tmp/mysql.sock3306 --port=3306root      11874   7035  0 10:55 pts/0    00:00:00 grep --color=auto mysql</code></pre><p>5、继续初始化和启动其它进程。<br>./mysqld_multi start 3307<br>./mysqld_multi start 3308</p><p>6、最终的mysql相关进程有6个。如下，分别3个mysqld、3个mysqld_safe 。</p><pre><code>[root@localhost bin]# ps -ef |grep mysqlroot      11675      1  0 10:55 pts/0    00:00:00 /bin/sh /home/mysql5.7/mysql-5.7.33-linux-glibc2.12-x86_64/bin/mysqld_safe --port=3306 --datadir=/mdata/mysql57-3306 --socket=/tmp/mysql.sock3306mysql     11827  11675  0 10:55 pts/0    00:00:00 /home/mysql5.7/mysql-5.7.33-linux-glibc2.12-x86_64/bin/mysqld --basedir=/home/mysql5.7/mysql-5.7.33-linux-glibc2.12-x86_64 --datadir=/mdata/mysql57-3306 --plugin-dir=/home/mysql5.7/mysql-5.7.33-linux-glibc2.12-x86_64/lib/plugin --user=mysql --log-error=error.log --pid-file=localhost.localdomain.pid --socket=/tmp/mysql.sock3306 --port=3306root      11948      1  0 10:56 pts/0    00:00:00 /bin/sh /home/mysql5.7/mysql-5.7.33-linux-glibc2.12-x86_64/bin/mysqld_safe --port=3307 --datadir=/mdata/mysql57-3307 --socket=/tmp/mysql.sock3307mysql     12104  11948  2 10:56 pts/0    00:00:00 /home/mysql5.7/mysql-5.7.33-linux-glibc2.12-x86_64/bin/mysqld --basedir=/home/mysql5.7/mysql-5.7.33-linux-glibc2.12-x86_64 --datadir=/mdata/mysql57-3307 --plugin-dir=/home/mysql5.7/mysql-5.7.33-linux-glibc2.12-x86_64/lib/plugin --user=mysql --log-error=error.log --pid-file=localhost.localdomain.pid --socket=/tmp/mysql.sock3307 --port=3307root      12199      1  0 10:57 pts/0    00:00:00 /bin/sh /home/mysql5.7/mysql-5.7.33-linux-glibc2.12-x86_64/bin/mysqld_safe --port=3308 --datadir=/mdata/mysql57-3308 --socket=/tmp/mysql.sock3308mysql     12352  12199  7 10:57 pts/0    00:00:00 /home/mysql5.7/mysql-5.7.33-linux-glibc2.12-x86_64/bin/mysqld --basedir=/home/mysql5.7/mysql-5.7.33-linux-glibc2.12-x86_64 --datadir=/mdata/mysql57-3308 --plugin-dir=/home/mysql5.7/mysql-5.7.33-linux-glibc2.12-x86_64/lib/plugin --user=mysql --log-error=error.log --pid-file=localhost.localdomain.pid --socket=/tmp/mysql.sock3308 --port=3308root      12398   7035  0 10:57 pts/0    00:00:00 grep --color=auto mysql</code></pre><p>7、 netstat -anl 看下端口。3306、3307、3308 都被占用了。</p><pre><code>[root@localhost tmp]# netstat -anlActive Internet connections (servers and established)Proto Recv-Q Send-Q Local Address           Foreign Address         State      tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN     tcp        0      0 192.168.6.128:22        192.168.6.1:1042        ESTABLISHEDtcp        0      0 192.168.6.128:22        192.168.6.1:1410        ESTABLISHEDtcp        0      0 192.168.6.128:22        192.168.6.1:2135        ESTABLISHEDtcp        0      0 192.168.6.128:22        192.168.6.1:1043        ESTABLISHEDtcp6       0      0 :::3306                 :::*                    LISTEN     tcp6       0      0 :::3307                 :::*                    LISTEN     tcp6       0      0 :::3308                 :::*                    LISTEN     tcp6       0      0 :::22                   :::*                    LISTEN     udp        0      0 127.0.0.1:323           0.0.0.0:*                          udp6       0      0 ::1:323                 :::*                               Active UNIX domain sockets (servers and established)Proto RefCnt Flags       Type       State         I-Node   Pathunix  2      [ ACC ]     STREAM     LISTENING     75933    /tmp/mysql.sock3306unix  3      [ ]         DGRAM                    11503    /run/systemd/notifyunix  2      [ ACC ]     STREAM     LISTENING     48932    /tmp/mysql.sock3307unix  2      [ ]         DGRAM                    11505    /run/systemd/cgroups-agentunix  2      [ ACC ]     STREAM     LISTENING     19191    /run/systemd/privateunix  2      [ ACC ]     STREAM     LISTENING     76809    /tmp/mysql.sock3308unix  2      [ ]         DGRAM                    33496    </code></pre><p>8、连接后修改密码。<br>使用sock连接。如mysql3306则指定/tmp/mysql.sock3306。<br>并set password = ‘1111aaA_’; 修改当前用户密码。</p><pre><code>[root@localhost bin]# ./mysql -S /tmp/mysql.sock3306 -pEnter password: ERROR 1045 (28000): Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: YES)[root@localhost bin]# ./mysql -S /tmp/mysql.sock3306 -pYe-7i!4-gtw)-bash: !4: event not found[root@localhost bin]# ./mysql -S /tmp/mysql.sock3306 -p&#39;Ye-7i!4-gtw)&#39;mysql: [Warning] Using a password on the command line interface can be insecure.Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 6Server version: 5.7.33Copyright (c) 2000, 2021, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.(root@localhost) [(none)]&gt;set password = &#39;1111aaA_&#39;;</code></pre><p>9、随后可以直接输入mysql登录了。</p><pre><code>[root@localhost /]# mysqlWelcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 9Server version: 5.7.33 MySQL Community Server (GPL)Copyright (c) 2000, 2021, Oracle and/or its affiliates.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.(root@localhost) [(none)]&gt;\s--------------mysql  Ver 14.14 Distrib 5.7.33, for linux-glibc2.12 (x86_64) using  EditLine wrapperConnection id:        9Current database:    Current user:        root@localhostSSL:            Not in useCurrent pager:        stdoutUsing outfile:        &#39;&#39;Using delimiter:    ;Server version:        5.7.33 MySQL Community Server (GPL)Protocol version:    10Connection:        Localhost via UNIX socketServer characterset:    latin1Db     characterset:    latin1Client characterset:    utf8Conn.  characterset:    utf8UNIX socket:        /tmp/mysql.sock3306Uptime:            14 min 19 secThreads: 2  Questions: 22  Slow queries: 0  Opens: 106  Flush tables: 1  Open tables: 99  Queries per second avg: 0.025--------------</code></pre><p>拓展：<br>1、同理，其它的mysql3307、mysql3308也是一样的操作。另外想要直接使用mysql -S /tmp/mysql.sock3307、mysql -S /tmp/mysql.sock3308 直接登录。那么需要将其它两个实例的密码都改为1111aaA_。</p><p>2、有人喜欢使用mysqld –defaults-file=/etc/my.cnf 的defaults-file参数来指定特定的my.cnf配置文件来实现多实例安装。但是这样的话实例一多就不好管理了。所以推荐使用mysqld_multi。</p><p>3、多实例IO竞争问题怎么解决？<br>对于资源管理、资源调度问题可以通过操作系统层面的技术解决。<br>LXC<br>docker<br>Cgroup</p><p>4、MHA、keepalive 这些集群软件请不要使用多实例安装，这种高可用软件肯定是要部署到多个机器上。</p><p>5、每次初始化会不会对已经存在的实例有影响？<br>初始化实例时请指定datadir：<br>./mysqld –initialize –datadir=/mdata/mysql57-3306<br>当然不指定的话，就算原来目录已经存在数据。那么此次执行会失败的。并不会对已经存在的数据目录产生影响。</p><pre><code>[root@localhost bin]# ./mysqld --initialize --datadir=/mdata/mysql57-33082021-05-01T04:18:01.028139Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).2021-05-01T04:18:01.029870Z 0 [ERROR] --initialize specified but the data directory has files in it. Aborting.2021-05-01T04:18:01.029901Z 0 [ERROR] Aborting</code></pre><p>6、使用mysqld_multi stop 3306 停止实例时可能会失败，因为实际上是去调用mysqladmin来停止，mysqladmin会去读取[client]下的用户名和密码 ，若不符合自然是关闭不了。可以选择使用kill来停止，或者去修改[client]配置。</p><pre><code>[root@localhost bin]# ./mysqld_multi stop 3307[root@localhost bin]# ./mysqld_multi report 3307Reporting MySQL serversMySQL server from group: mysqld3307 is running</code></pre><p>7、选择单机多实例，还是建立多个虚拟机？<br>这就是不同的资源调度的方式。<br>像淘宝的RDS云数据库就是使用LXC Container 来进行资源隔离的，其实就是安装多个实例，这种方式性能会更好。当然虚拟机也有它的好处。</p><p>8、一个实例建立多个数据库。或者多个数据库分别放到不同实例下。<br>这个还是得看业务。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>first</title>
      <link href="/2021/05/02/first/"/>
      <url>/2021/05/02/first/</url>
      
        <content type="html"><![CDATA[<p>###first</p><p><img src="./kw.jpeg"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
